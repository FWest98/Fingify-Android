buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://maven.google.com' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
        classpath 'me.tatarka:gradle-retrolambda:3.2.5'
        classpath 'com.github.triplet.gradle:play-publisher:1.2.0'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.github.triplet.play'

repositories {
    mavenCentral()
    jcenter()
    maven { url 'http://dl.bintray.com/populov/maven' }
    maven { url 'https://maven.google.com' }
}

android {
    compileSdkVersion 25
    buildToolsVersion "27.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 25
        applicationId 'com.fwest98.fingify'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    signingConfigs {
        debug {
            storeFile rootProject.file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }

        if(System.getenv("TRAVIS")) {
            release {
                storeFile rootProject.file('releasekeystore.jks')
                storePassword System.getenv("KEYSTORE_PASS")
                keyAlias System.getenv("ALIAS_NAME")
                keyPassword System.getenv("ALIAS_PASS")
            }
        } else {
            release {
                storeFile rootProject.file('releasekeystore.jks')
                storePassword ""
                keyAlias ""
                keyPassword ""
            }
        }
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "GRADLE_DEBUG", "true"
            applicationIdSuffix ".debug"
        }

        prerelease {
            buildConfigField "boolean", "GRADLE_DEBUG", "true"
        }

        release {
            buildConfigField "boolean", "GRADLE_DEBUG", "false"
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    dexOptions {
        maxProcessCount = 4
    }
}

dependencies {
    //implementation fileTree(dir: 'libs', include: ['pass-v1.2.2.jar', 'sdk-v1.0.0.jar'])

    // Google libs
    compile 'com.android.volley:volley:1.0.0'
    compile 'com.google.android.gms:play-services-base:8.3.0'
    compile 'com.google.android.gms:play-services-gcm:8.3.0'
    compile 'com.android.support:support-v13:25.4.0'
    compile 'com.android.support:support-v4:25.4.0'
    compile 'com.android.support:recyclerview-v7:25.4.0'
    compile 'com.android.support:cardview-v7:25.4.0'
    compile 'com.android.support:design:25.4.0'
    compile 'com.android.support:preference-v14:25.4.0'

    // Barcodescanner libs
    compile 'me.dm7.barcodescanner:zbar:1.9.3'
    compile 'com.google.zxing:core:3.3.0'

    // Functional libs
    provided 'org.projectlombok:lombok:1.16.16'
    annotationProcessor 'org.projectlombok:lombok:1.16.16'
    //compile 'javax.annotation:jsr250-api:1.0'

    compile 'com.j256.ormlite:ormlite-core:5.0'
    compile 'com.j256.ormlite:ormlite-android:5.0'

    compile 'org.functionaljava:functionaljava:4.7'

    compile 'org.jboss.aerogear:aerogear-otp-java:1.0.0'
    compile 'ch.acra:acra:4.9.2'

    // Design libs
    compile 'com.mikepenz.aboutlibraries:library:4.5.0'
    compile ('com.mikepenz:materialdrawer:5.9.3@aar') { transitive = true }
    compile 'com.mikepenz:google-material-typeface:3.0.1.1.original@aar'
    compile 'it.neokree:MaterialTabs:0.11'
    compile 'me.zhanghai.android.materialprogressbar:library:1.4.1'
    compile 'io.github.yavski:fab-speed-dial:1.0.6'
}

if(System.getenv("TRAVIS") && System.getenv("TRAVIS_TAG")) {
    play {
        serviceAccountEmail = System.getenv("SERVICE_EMAIL")
        pk12File = rootProject.file('play.p12')
        if(System.getenv("TRAVIS_TAG") && System.getenv("TRAVIS_TAG").contains("beta")) {
            track = 'beta'
        } else if(System.getenv("TRAVIS_TAG") && System.getenv("TRAVIS_TAG").contains("alpha")) {
            track = 'alpha'
        } else {
            track = 'production'
        }
    }
}

task travisBuild(dependsOn: [':app:clean', ':app:assembleRelease'])

if(System.getenv("TRAVIS_TAG")) {
    tasks.travisBuild.dependsOn(':RoosterPGPlus:publishApkRelease')
}

tasks.whenTaskAdded { task ->
    if(task.name == 'assembleRelease') {
        task.mustRunAfter clean
    }
}